# Задание 2

import statistics as st

shows = {'Секретные материалы': 'фантастика', 'Ведьмак': 'фэнтази', 'Клан Сопрано': 'криминал', '24': 'драма',
         'Черное зеркало': 'фантастика', 'Во все тяжкие': 'криминал', 'Игра престолов': 'фэнтази',
         'Карточный домик': 'драма', 'Рик и Морти': 'фантастика'}
ratings = {'Секретные материалы': 0.9, 'Ведьмак': 0.95, 'Клан Сопрано': 0.8, '24': 0.75, 'Черное зеркало': 0.98,
           'Во все тяжкие': 0.85, 'Игра престолов': 0.87, 'Карточный домик': 0.82, 'Рик и Морти': 1}

print('Данная программа поможет Вам узнать средний рейтинг среди сериалов определённого жанра.')
chose = str(input('Уажите интерессующий Вас жанр\n:')).strip().lower()


def to_search():
    """
    Данная функция находит по жанру пользователя сериалы и их рейтинг. Состоит из:
    chose выбор пользователя;
    outputs: Сисок из ключей словаря shows, хранящий в себе названия сериалов по определенному жанру;
    show: Ключ словаря shows;
    genre: Значенеи словаря shows;
    :return outputs: Передаём занчение outputs в функцию to_analyze.
    """
    outputs = []
    for show, genre in shows.items():
        if genre == chose:
            outputs.append(show)
    return outputs


to_search()


def to_analyze(outputs):
    """
    Данная функция принимает на вход outputs и для данных сериалов находит рейтинг, подсчитывает их средний рейтинг и
    выводит жанр, средний рейтин сериалов в данном жанре. Состоит из:
    :param outputs: Сисок из ключей словаря shows, хранящий в себе названия сериалов по определенному жанру;
    result: Ключ словаря shows определённого жанра полученный для поска его рейтинга в словаре ratings
    analyze: Список из значений в словаре ratings по result;
    avg: Средний рейтинг сериалов в срезе по определённому жанру.
    """

    analyze = []
    for result in outputs:
        if result in ratings.keys():
            analyze.append(ratings[result])
    avg = float(st.mean(analyze))*10
    avg = format(avg, '.2f')
    print(f'Средний рейтинг сериалов в жанре {chose} составляет {avg} / 10.00')


to_analyze(to_search())
