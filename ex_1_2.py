'''
Задание 1.2 безопасный вариант в несколько функций, связанных меж собой.
'''

anya = {'Секретные материалы': 'фантастика', 'Карточный домик': 'драма', 'Рик и Морти': 'фантастика'}
olya = {'Клан Сопрано': 'криминал', '24': 'драма', 'Во все тяжкие': 'криминал', 'Карточный домик': 'драма'}
nastya = {'Ведьмак': 'фэнтази', 'Игра престолов': 'фэнтази'}
sveta = {'Черное зеркало': 'фантастика', 'Карточный домик': 'драма', 'Рик и Морти': 'фантастика'}

list_1 = set()
list_2 = set()
user_1 = ''
user_2 = ''

print('Программа сравнит предпочтение 4х девочек в сериалах.\n'
      'выберите 2х девочек для старта программы: Аня, Оля, Настя, Света.')


def to_wait():
    """
    Данная функция ожидает от пользователя ввод имён девочек, далее согласно имени смотрит в словарь с их сериалами и 
    наполняет список (соответствуеющей формуле user_x = 'ИМЯ' = 'ИМЯ'{Словарь} = list_x) из значений словаря.
    list_1: глобальная переменная, несёт в себе список названий сериалов одной из девочек.
    list_2: глобальная переменная, несёт в себе список названий сериалов одной из девочек.
    user_1: глобальная переменная, несёт в себе имя одной из девочек.
    user_2: глобальная переменная, несёт в себе имя одной из девочек.
    """

    global list_1
    global list_2
    global user_1
    global user_2

    user_1 = input('Введите имя первой девочки\n:').strip().lower()
    if user_1 == 'аня':
        list_1 = set(anya.values())
    elif user_1 == 'оля':
        list_1 = set(olya.values())
    elif user_1 == 'настя':
        list_1 = set(nastya.values())
    elif user_1 == 'света':
        list_1 = set(sveta.values())
    else:
        print('Имя введено не верно начните с начала.')
        user_1 = 'ERR'

    user_2 = input('Введите имя второй девочки\n:').strip().lower()
    if user_2 == 'аня':
        list_2 = set(anya.values())
    elif user_2 == 'оля':
        list_2 = set(olya.values())
    elif user_2 == 'настя':
        list_2 = set(nastya.values())
    elif user_2 == 'света':
        list_2 = set(sveta.values())
    else:
        print('Имя введено не верно начните с начала.')
        user_2 = 'ERR'


to_wait()


def to_chek():
    """
    В данной функиц происходит проверка корректности ввода имён девочек, если есть отклонение, то возвращаемся к
    функции to_wait(), если всё хорошо, то процесс продолжается уже в функции to_cross_lists().
    user_1: глобальная переменная, несёт в себе имя одной из девочек.
    user_2: глобальная переменная, несёт в себе имя одной из девочек.
    """

    global user_1
    global user_2

    if user_1 == 'ERR' or user_2 == 'ERR':
        print('Имя одной из девочк введено не верно начните с начала.')
        to_wait()
    elif str(user_1) == str(user_2):
        print('В сравнеии могут участвовать только две разные девочки, нельзя указывать одно и тоже имя!\n'
              'Повторите попытку.')
        to_wait()
    else:
        return True
    

to_chek()


def to_cross_lists():
    """
    Данная функция сравнивает 2 списка полученные в функции to_wait().
    list_1: глобальная переменная, несёт в себе список названий сериалов одной из девочек.
    list_2: глобальная переменная, несёт в себе список названий сериалов одной из девочек.
    result: результат сравнения списков list_1 и list_2.
    """

    global list_1
    global list_2

    result = list_1 & list_2
    result = ', '.join(result)

    if len(result) == 0:
        print(user_1.title() + ' и ' + user_2.title() + ' не смотрят сериалы с одинаковым жанром.')
    else:
        print(user_1.title() + ' и ' + user_2.title() + ' смотрят сериалы жанров(а) ' + result + '.')


to_cross_lists()


def to_finish():
    """
    Данная функция узнаёт у пользователя хочет ли он повторить работу программы и в случае положительного
    ответа возвращается в начало программы к функции to_wait().
    flag аппаратная переменная, используется тут для проверки, в глобальном списке переменных не используется.
    """
    while True:
        print('Если вы хотите узнать общие жанры сериалов у других пар девочек, то введите "ДА"'
              ', если хотите закончить и выйти из программы, то введите "НЕТ"')
        flag = input('ДА/НЕТ\n:')
        flag = flag.strip().upper()
        if flag == 'ДА':
            to_wait()
        else:
            break


to_finish()
